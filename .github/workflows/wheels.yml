# https://cibuildwheel.pypa.io/en/stable/setup/#github-actions
name: CI Build Wheel

on: [push, pull_request]

env:
  # (a) skip all 32-bit builds (source issue: datastream.h assumes size_t != unsigned long, which breaks on 32bit)
  # (b) skipy pypy builds: embedding interpreter not supported (pythonfield.C)
  # (c) skip all musllinux builds (compiles but segfaults at import time)
  CIBW_SKIP: "*-win32 *-manylinux_i686 pp* *musllinux*"
  # https://cibuildwheel.pypa.io/en/stable/cpp_standards/#macos-and-deployment-target-versions
  MACOSX_DEPLOYMENT_TARGET: 10.14
  # on Linux, don't build i686
  CIBW_BUILD_LINUX: "x86_64"

  ## use delvewheel on windows: https://github.com/pypa/cibuildwheel/discussions/1798
  ## seems not necessary with MSVC builds, and might become the default in cibuildwheel itself later
  # CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
  # CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      # want to see all failures
      fail-fast: false
      matrix:
        # macos-14, macos-13: compiles okay, tests segfault at import time
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: TheMrMilchmann/setup-msvc-dev@v3
        if: runner.os=='Windows'
        with:
          arch: x64
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.2
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz
  build_pyodide:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Python
      run: |
          # skip this step if already installed (such as locally re-using container with naktos/act)
          [ -f /usr/bin/ninja ] || ( sudo apt-get update; sudo apt-get --yes install cmake git build-essential ninja-build python3.12 python3-all-dev python3-pip )
          pip install pyodide-build py-build-cmake
    - name: Pyodide build
      run: |
          [ -d emsdk ] || git clone https://github.com/emscripten-core/emsdk.git emsdk
          pushd emsdk
            export PYODIDE_EMSCRIPTEN_VERSION=$(pyodide config get emscripten_version)
            ./emsdk install ${PYODIDE_EMSCRIPTEN_VERSION}
            ./emsdk activate ${PYODIDE_EMSCRIPTEN_VERSION}
            source emsdk_env.sh
          popd
          pyodide build --build-dependencies
    - name: Pyodide test
      run: |
          pyodide venv build/venv-pyodide
          source build/venv-pyodide/bin/activate
          pip install dist/oofem-*_wasm32.whl
          pip install pytest numpy
          python -m pytest bindings/python/tests
    - uses: actions/upload-artifact@v4
      with:
        # called cibw-* so that download-artifacts can collect it
        name: cibw-notreally-pyodide
        path: dist/oofem-*_wasm32.whl

  upload_pypi:
    needs: [build_wheels, build_sdist, build_pyodide]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    ## for testing, upload always
    # if: github.event_name == 'release' && github.event.action == 'published'
    ## or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true
      - uses: pypa/gh-action-pypi-publish@release/v1
        # with:
        #   repository-url: https://test.pypi.org/legacy/

